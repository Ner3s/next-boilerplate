import {
  createContext,
  Dispatch,
  ReactNode,
  SetStateAction,
  useContext,
  useState
} from 'react';

interface I{{pascalCase name}}ContextData {
  state: string;
  setState: Dispatch<SetStateAction<string>>;
}

interface I{{pascalCase name}}Provider {
  children: ReactNode;
}

const {{pascalCase name}}Context = createContext<I{{pascalCase name}}ContextData>(
  {} as I{{pascalCase name}}ContextData,
);

function {{pascalCase name}}Provider({ children }: I{{pascalCase name}}Provider){
  const [state, setState] = useState<string>('');

  return (
    <{{pascalCase name}}Context.Provider value={ { state, setState } }>
      {children}
    </{{pascalCase name}}Context.Provider>
  );
}

function use{{pascalCase name}}() {
  const context = useContext({{pascalCase name}}Context);

  if (!context) {
    throw new Error('use{{pascalCase name}} must be used within an {{pascalCase name}}Provider');
  }

  return context;
}

export { {{pascalCase name}}Provider, use{{pascalCase name}} };
